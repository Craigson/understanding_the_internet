Initiated by Tim Berners-Lee at CERN in 1989.  
HTTP is a request-response application-level protocol based on a client-server model.
HTTP is a TCP/IP based communication protocol that's used to deliver data (HMTL files, images, query results etc.) between computers in a standardized way.
The connection defaults to TCP port 80.
HTTP is both connectionless and stateless. This means that once an HTTP request is made, the client disconnects from the server and waits for a response.
When the server responds, it re-establishes the connection in order to send the response. The fact that HTTP is stateless refers to the fact that
the client are only aware of each other during the current request. Once it's over, they forget about each other.
Any kind of data can be sent by HTTP, provided the client and server both know how to handle the data. Both client and
server are required to specify the content's MIME-type ( more on MIME) .
An HTTP request does exactly what it sounds like, as in it is requesting information/data from a specific server.
Each request/response contains a number of important HTTP Protocol Parameters (which are located in the headers), these include:
	HTTP Version,
	Uniform Resource Identifiers (URIs are used to identify a resource and establish a connection),
	Date/Time formats,
	Character sets (eg. US-Ascii),
	Content Encodings (this value indicates which encoding algorithm has been used to encode the content),
	Media Types (for data typing and type negotiation),
	Language Tags

Request/Response Structure:
Every HTTP request/response has the same structure:
	A startline
	Zero or more header fields followed by CRLF (carriage return and line feed characters)
	An empty line (indicated end of header fields)
	Optional message-body

Start-Line:
The start-line can either be a request-line, or status-line, depending on whether it was sent from the client or the server.
Both contains the HTTP version ( eg. HTTP/1.1), whereas the request-line will contain the request type (eg. GET) and the endpoint (eg. /example.html).
The Status line contains a status code (eg. 200) and a status message (eg. OK).
Example Request-Line: GET /example.com HTTP/1.1
Example Status-Line: HTTP/1.1 200 OK

Headers:
Header fields provide the necessary information about the request/response, or about the data in the message body.

Message Body:
The message body is optional, but if it is present it carries the entity-body of the request/response.
The Content-Type and Content-Length properties in the header describe the content.
The message body contains the actual data. In the case of a client request, this could be form data, a file that's been uploaded etc.
In the case of the server's response, it could contain a file, an image etc., but is more often that not an HTML page.

Request Methods:
The request method indicates the action to be performed on the resource identified
by the given Request-URI.  The methods are as follows:
GET: retrieves information from the server using the URI as a query string
HEAD: same as GET, but transfers the status line and the header only
POST: used to send data to server, eg. form data and files (more secure than GET)
PUT: replaces target resource with uploaded content
DELETE: removes target resource given by URI
CONNECT: establisheds a tunnel to the server identified by URI
OPTIONS: describe the communication options for the target resource, it can be used by the client to find out the HTTP methods and other options that the web server supports.
TRACE: Performs a message loop back test along with the path to the target resource ( mainly used for debugging during development)

HTTP Status Codes and Messages:
Status codes are 3-digit integers that form part of the server response, indicating the success-state of the request.  The first digit describes the class of the response.
1xx: Informational
2xx: Success
3xx: Redirection
4xx: Client Error
5xx: Server Error

Caching:
Performance across HTTP can be improved through the use of caching.  Caching helps eliminate the need to send requests, in certain cases, as well as the need for the server to send full responses (ie. using the back button in the browser and reloading a page that you've previously visited.  Certain information is cached so that it doesn't need to be requested from the server again).  Caching can be control using the Cache-Control header

An important note on security:
HTTP clients come into contact with a lot of personalized/private data (eg. names, locations, email addresses, passwords, encryption keys etc.). HTTP is an unsecured, unecrypted protocol, and much of this information can be 'leaked'.  For this reason, it's important to use HTTPS wherever possibly.  Not only is it encrypted, but it's also been designed to be faster!


